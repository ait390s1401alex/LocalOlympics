/**
 * Copyright 2014 -
 * Licensed under the Academic Free License version 3.0
 * http://opensource.org/licenses/AFL-3.0
 * 
 * Authors: Karen and Anugh
 */



package localolympics.db;


import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * GAE ENTITY UTIL CLASS: "Participant" <br>
 * PARENT: NONE <br>
 * KEY: A long Id generated by GAE <br>
 * FEATURES: <br>
 * - "firstName" a {@link String} with the firstname record for the participant<br>
 * - "lastName" a {@link String} with the lastname record for the participant<br>
 * - "alias" a {@link String} with the alias record for the participant<br>
 * - "gender" a {@link String} with the gender record for the participant<br>
 * - "birthday" a {@link String} with the birthday record for the participant<br>
 * - "aboutMe" a {@link String} with the aboutme record for the participant<br>
 * - "address" a {@link String} with the address record for the participant<br>
 * - "isAdmin" a {@link String} wiht the isadmin value for the participant<br>
 */


public class Participant {
	/**
     * Private constructor to avoid instantiation.
     */
    private Participant() {
    }
    //
    // KIND
    //
    
    /**
     * The name of the User ENTITY KIND used in GAE.
     */
    private static final String ENTITY_KIND = "Participant";
    
    /**
     * Return the Key for a given user id given as String. 
     * @param userId A string with the User ID (a long).
     * @return the Key for this userID. 
     */
    public static Key getKey(String participantId) {
            long id = Long.parseLong(participantId);
            Key participantKey = KeyFactory.createKey(ENTITY_KIND, id);
            return participantKey;
    }
    
    /**
     * Return the string ID corresponding to the key for the user.
     * @param user The GAE Entity storing the user.
     * @return A string with the lot ID (a long).
     */
    public static String getStringID(Entity participant) {
            return Long.toString(participant.getKey().getId());
    }
    
    //
    // FIRST NAME
    //
    
    /**
     * The property name for the <b>name</b> of the user profile.
     */
    private static final String FIRSTNAME_PROPERTY = "firstName";
    
    /**
     * Return the name of the user. 
     * @param user The GAE Entity storing the user.
     * @return the name of the user. 
     */
    public static String getFirstName(Entity participant) {
	        Object firstName = participant.getProperty(FIRSTNAME_PROPERTY);
	        if (firstName == null) firstName = "";
	        return (String)firstName;
    }
    
    
    //
    // LAST NAME
    //
    
    /**
     * The property name for the <b>name</b> of the user profile.
     */
    private static final String LASTNAME_PROPERTY = "lastName";
    
    /**
     * Return the name of the user. 
     * @param user The GAE Entity storing the user.
     * @return the name of the user. 
     */
    public static String getLastName(Entity participant) {
	        Object lastName = participant.getProperty(LASTNAME_PROPERTY);
	        if (lastName == null) lastName = "";
	        return (String)lastName;
    }
    
    //
    // ALIAS
    //
    
    /**
     * The property name for the <b>name</b> of the user profile.
     */
    private static final String ALIAS_PROPERTY = "Alias";
    
    /**
     * Return the alias of the user. 
     * @param user The GAE Entity storing the user.
     * @return the alias of the user. 
     */
    public static String getAlias(Entity participant) {
	        Object alias = participant.getProperty(ALIAS_PROPERTY);
	        if (alias == null) alias = "";
	        return (String)alias;
    }
    
    
    
    //
    // ADDRESS
    //
    
    /**
     * The property name for the <b>name</b> of the user profile.
     */
    private static final String ADDRESS_PROPERTY = "address";
    
    /**
     * Return the name of the user. 
     * @param user The GAE Entity storing the user.
     * @return the name of the user. 
     */
    public static String getAddress(Entity participant) {
	        Object address = participant.getProperty(ADDRESS_PROPERTY);
	        if (address == null) address = "";
	        return (String)address;
    }
    
   
   
    
    /**
     * The regular expression pattern for the name of the admin profile.
     */
    private static final Pattern NAME_PATTERN = Pattern.compile("\\A[A-Za-z]+([ -][A-Za-z]+){0,10}\\Z");

    /**
     * Check if the name is correct for a user. 
     * @param name The checked string. 
     * @return true is the name is correct. 
     */
    public static boolean checkName(String name) {
            Matcher matcher=NAME_PATTERN.matcher(name);
            return matcher.find();
    }
    
    //
    // LOGIN ID
    //
    
    /**
     *  The property name for the <b>loginID</b> of the admin profile.
     */
    private static final String LOGIN_ID_PROPERTY = "loginID";
    //LOGIN_ID_PROPERTY = email address tied to Google OAuth?
    
    /**
     * Return the login ID of the profile. 
     * @return a String with the permit type. 
     */
    public static String getLoginID(Entity participant) {
            Object val = participant.getProperty(LOGIN_ID_PROPERTY);
            if (val == null) 
            	val = "";
            return (String) val;
    }
    
    
    //
    // CREATE USER
    //

    /**
     * Create a new user if the login ID is correct and none exists with this id.
     * @param loginID The id for this user.
     * @return the Entity created with this id or null if error
     */
    public static Entity createParticipant(String loginID) {
            Entity participant = null;
            DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
            Transaction txn = datastore.beginTransaction();
            try {
            
                    participant = getParticipantWithLoginID(loginID);
                    if (participant!=null) {
                            return null;
                    }
                    
                    participant = new Entity(ENTITY_KIND);
                    participant.setProperty(LOGIN_ID_PROPERTY, loginID);
                    datastore.put(participant);

                txn.commit();
            } finally {
                if (txn.isActive()) {
                    txn.rollback();
                }
            }
            
            return participant;
    }
    
    
    private static final String GENDER_PROPERTY = "gender";
    private static final String BIRTHDAY_PROPERTY = "birthday";
    private static final String ACTIVITY_PROPERTY = "activity";
    private static final String ABOUTME_PROPERTY = "aboutme";
    private static final String ISADMIN_PROPERTY = "isAdmin";
    private static final String VALIDATED_PROPERTY = "validated";
    private static final String EMAIL_PROPERTY = "email";
    
    public static String getGender(Entity participant) {
        Object gender = participant.getProperty(GENDER_PROPERTY);
        if (gender == null) gender = "";
        return (String)gender;
    }
    
    public static String getBirthday(Entity participant) {
        Object birthday = participant.getProperty(BIRTHDAY_PROPERTY);
        if (birthday == null) birthday = "";
        return (String)birthday;
}
    public static String getActivity(Entity participant) {
        Object activity = participant.getProperty(ACTIVITY_PROPERTY);
        if (activity == null) activity = "";
        return (String)activity;
}
    public static String getAboutMe(Entity participant) {
        Object aboutMe = participant.getProperty(ABOUTME_PROPERTY);
        if (aboutMe == null) aboutMe = "";
        return (String)aboutMe;
}
    public static String getIsAdmin(Entity participant) {
        Object isAdmin = participant.getProperty(ISADMIN_PROPERTY);
        if (isAdmin == null) isAdmin = "";
        return (String)isAdmin;
    }
    
    public static String getValidatedEmail(Entity participant) {
        Object validatedEmail = participant.getProperty(VALIDATED_PROPERTY);
        if (validatedEmail == null) validatedEmail = "false";
        return (String)validatedEmail;
    }
    
    public static String getEmail(Entity participant) {
        Object email = participant.getProperty(EMAIL_PROPERTY);
        if (email == null) email = "false";
        return (String)email;
    }
    

    @JsonProperty
    public String getId() {
        return id;
    }
    @JsonProperty
    public void setId(String id) {
        this.id = id;
    }
    @JsonProperty
    public String getFirstName() {
        return firstName;
    }
    @JsonProperty
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    @JsonProperty
    public String getLastName() {
        return lastName;
    }
    @JsonProperty
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    @JsonProperty
    public String getAlias() {
        return alias;
    }
    @JsonProperty
    public void setAlias(String alias) {
        this.alias = alias;
    }
    @JsonProperty
    public String getGender() {
        return gender;
    }
    @JsonProperty
    public void setGender(String gender) {
        this.gender = gender;
    }
    @JsonProperty
    public String getBirthday() {
        return birthday;
    }
    @JsonProperty
    public void setBirthday(String birthday) {
        this.birthday = birthday;
    }
    @JsonProperty
    public String getActivity() {
        return activity;
    }
    @JsonProperty
    public void setActivity(String activity) {
        this.activity = activity;
    }
    @JsonProperty
    public String getAboutMe() {
        return aboutMe;
    }
    @JsonProperty
    public void setAboutMe(String aboutMe) {
        this.aboutMe = aboutMe;
    }
    @JsonProperty
    public String getAddress() {
        return address;
    }
    @JsonProperty
    public void setAddress(String address) {
        this.address = address;
    }
    @JsonProperty
    public String getLoginId() {
        return loginId;
    }
    @JsonProperty
    public void setLoginId(String loginId) {
        this.loginId = loginId;
    }
    @JsonProperty
    public String getIsAdmin() {
        return isAdmin;
    }
    @JsonProperty
    public void setIsAdmin(String isAdmin) {
        this.isAdmin = isAdmin;
    }
    @JsonProperty
    public String getIsValidated() {
        return isValidated;
    }
    @JsonProperty
    public void setIsValidated(String isValidated) {
        this.isValidated = isValidated;
    }
    @JsonProperty
    public String getEmail() {
        return email;
    }
    @JsonProperty
    public void setEmail(String email) {
        this.email = email;
    }
    
    
    
    
    private String id;
    private String firstName;
    private String lastName;
    private String alias;
    private String gender;        
    private String birthday;
    private String activity;
    private String aboutMe;
    private String address;
    private String loginId;
    private String isAdmin;
    private String isValidated;
    private String email;
    

            
            
            
            
    //
    // SET VALIDATRED ID
    //

    public static void setValidatedEmail(Entity participant, String value) {
    	DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
        Transaction txn = datastore.beginTransaction();
    	try{
    		participant.setProperty(VALIDATED_PROPERTY, value);
    		datastore.put(participant);

            txn.commit();
        } finally {
            if (txn.isActive()) {
                txn.rollback();
            }
        }
    }
    
    
    //
    // SET USERID
    //
    
    public static void setUserId(Entity participant, String value) {
    	DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
        Transaction txn = datastore.beginTransaction();
    	try{
    		participant.setProperty(LOGIN_ID_PROPERTY, value);
    		datastore.put(participant);

            txn.commit();
        } finally {
            if (txn.isActive()) {
                txn.rollback();
            }
        }
        
    }
    
    
    //
    // SET EMAIL
    //
    
    public static void setEmail(Entity participant, String value) {
    	DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
        Transaction txn = datastore.beginTransaction();
    	try{
    		participant.setProperty(EMAIL_PROPERTY, value);
    		datastore.put(participant);

            txn.commit();
        } finally {
            if (txn.isActive()) {
                txn.rollback();
            }
        }
        
    }
    
    
    public static Entity createParticipant(String loginID, String firstName, String lastName, String alias,
    		String gender, String birthday, String activity, String aboutme, String address, String validated, String email) {
        Entity participant = null;
        DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
        Transaction txn = datastore.beginTransaction();
        try {
        
                participant = getParticipantWithLoginID(loginID);
                if (participant!=null) {
                        return null;
                }
                
                participant = new Entity(ENTITY_KIND);
                participant.setProperty(LOGIN_ID_PROPERTY, loginID);
                participant.setProperty(FIRSTNAME_PROPERTY, firstName);
                participant.setProperty(LASTNAME_PROPERTY, lastName);
                participant.setProperty(ALIAS_PROPERTY, alias);
                participant.setProperty(GENDER_PROPERTY, gender);
                participant.setProperty(BIRTHDAY_PROPERTY, birthday);
                participant.setProperty(ACTIVITY_PROPERTY, activity);
                participant.setProperty(ABOUTME_PROPERTY, aboutme);
                participant.setProperty(ADDRESS_PROPERTY, address);
                participant.setProperty(VALIDATED_PROPERTY, validated);
                participant.setProperty(EMAIL_PROPERTY, email);
                datastore.put(participant);

            txn.commit();
        } finally {
            if (txn.isActive()) {
                txn.rollback();
            }
        }
        
        return participant;
}
    
    
    
    
    
    
    
    //
    // GET USER
    //

    /**
     * Get the user based on a string containing its long ID.
     * 
     * @param id A {@link String} containing the ID key (a <code>long</code> number)
     * @return A GAE {@link Entity} for the User or <code>null</code> if none or error.
     */
    public static Entity getParticipant(String participantId) {
            Entity participant = null;
            try {
                    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
                    long id = Long.parseLong(participantId);
                    Key participantKey = KeyFactory.createKey(ENTITY_KIND, id);
                    participant = datastore.get(participantKey);
            } catch (Exception e) {
                    // TODO log the error
            }
            return participant;
    }
    
    /**
     * Get the user based on a string containing its long ID.
     * 
     * @param id A {@link String} containing the ID key (a <code>long</code> number)
     * @return A GAE {@link Entity} for the User or <code>null</code> if none or error.
     */
    public static Entity getParticipant(Long participantId) {
            Entity participant = null;
            try {
                    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
                    Key participantKey = KeyFactory.createKey(ENTITY_KIND, participantId);
                    participant = datastore.get(participantKey);
            } catch (Exception e) {
                    // TODO log the error
            }
            return participant;
    }
    
    /**
     * Get an user based on a string containing its loginID.
     * @param loginID The login of the user as a String.
     * @return A GAE {@link Entity} for the user or <code>null</code> if none or error.
     */
    public static Entity getParticipantWithLoginID(String loginID) {
            DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
            return getParticipantWithLoginID(datastore, loginID);
    }
    
    /**
     * Get a user based on a string containing its name.
     * @param datastore The current datastore instance. 
     * @param name The name of the user as a String.
     * @return A GAE {@link Entity} for the User or <code>null</code> if none or error.
     */
    public static Entity getParticipantWithLoginID(DatastoreService datastore, String loginID) {
            Entity participant = null;
            try {
                    
                    Filter hasLoginID =
                                      new FilterPredicate(LOGIN_ID_PROPERTY,
                                                          FilterOperator.EQUAL,
                                                          loginID);
                    Query query = new Query(ENTITY_KIND);
                    query.setFilter(hasLoginID);
                    List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(10));
                    if (result!=null && result.size()>0) {
                            participant=result.get(0);
                    }
            } catch (Exception e) {
                    // TODO log the error
            }
            return participant;
    }
    
    /**
     * Get an list of alias based on a string containing its loginID.
     * @return A GAE {@link Entity} for the user or <code>null</code> if none or error.
     */
    public static Entity getParticipantWithAlias(String alias) {
            DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
            Entity part = null;
            try {
            	Filter hasName = new FilterPredicate(ALIAS_PROPERTY, FilterOperator.EQUAL, alias);
    			Query query = new Query(ENTITY_KIND);
    			query.setFilter(hasName);
    			List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(10));
    			if (result != null && result.size() > 0) {
    				part = result.get(0);
    			}
    		} catch (Exception e) {
    			// TODO log the error
    		}
    		return part;
    }
    
    
    //
    // UPDATE USER
    //
    
    /**
     * Update the current description of the User.
     * @param userID A string with the user ID (a long).
     * @param name The name of the user as a String.
     * @param loginID The login ID of the user as a String.
     * @return true if succeed and false otherwise
     */
    public static boolean updateParticipantCommand(String participantID, String firstName, String participantLoginID) {
            Entity participant = null;
            try {
            		participant = getParticipant(participantID);
            		participant.setProperty(FIRSTNAME_PROPERTY, firstName);
            		participant.setProperty(LOGIN_ID_PROPERTY, participantLoginID);
                    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
                    datastore.put(participant);
            } catch (Exception e) {
                    return false;
            }
            return true;
    }
    
    
    
    
    
    
    //
    // UPDATE USER
    //
    
    /**
     * Update the current description of the User.
     * @param userID A string with the user ID (a long).
     * @param name The name of the user as a String.
     * @param loginID The login ID of the user as a String.
     * @return true if succeed and false otherwise
     */
    
    /*private static final String GENDER_PROPERTY = "gender";
    private static final String BIRTHDAY_PROPERTY = "birthday";
    private static final String ACTIVITY_PROPERTY = "activity";
    private static final String ABOUTME_PROPERTY = "aboutme";*/
    
    public static boolean updateParticipantCommand(String participantID, String firstName, String lastName, String alias,
    		String gender, String birthday, String activity, String aboutme, String address, String participantLoginID, String isAdmin, 
    		String validated, String email) {
            Entity participant = null;
            try {
            		participant = getParticipant(participantID);
            		participant.setProperty(FIRSTNAME_PROPERTY, firstName);
            		participant.setProperty(LASTNAME_PROPERTY, lastName);
            		participant.setProperty(ALIAS_PROPERTY, alias);
            		participant.setProperty(GENDER_PROPERTY, gender);
            		participant.setProperty(BIRTHDAY_PROPERTY, birthday);
            		participant.setProperty(ACTIVITY_PROPERTY, activity);
            		participant.setProperty(ABOUTME_PROPERTY, aboutme);
            		participant.setProperty(LOGIN_ID_PROPERTY, participantLoginID);
            		participant.setProperty(ADDRESS_PROPERTY, address);
            		participant.setProperty(ISADMIN_PROPERTY, isAdmin);
            		participant.setProperty(VALIDATED_PROPERTY, validated);
            		participant.setProperty(EMAIL_PROPERTY, email);
                    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
                    datastore.put(participant);
            } catch (Exception e) {
                    return false;
            }
            return true;
    }
    
    
    public static boolean updateParticipantCommand(String participantID, String firstName, String lastName, String alias,
    		String gender, String birthday, String activity, String aboutme, String address, String participantLoginID,  String email) {
            Entity participant = null;
            try {
            		participant = getParticipant(participantID);
            		participant.setProperty(FIRSTNAME_PROPERTY, firstName);
            		participant.setProperty(LASTNAME_PROPERTY, lastName);
            		participant.setProperty(ALIAS_PROPERTY, alias);
            		participant.setProperty(GENDER_PROPERTY, gender);
            		participant.setProperty(BIRTHDAY_PROPERTY, birthday);
            		participant.setProperty(ACTIVITY_PROPERTY, activity);
            		participant.setProperty(ABOUTME_PROPERTY, aboutme);
            		participant.setProperty(LOGIN_ID_PROPERTY, participantLoginID);
            		participant.setProperty(ADDRESS_PROPERTY, address);
            		participant.setProperty(EMAIL_PROPERTY, email);
                    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
                    datastore.put(participant);
            } catch (Exception e) {
                    return false;
            }
            return true;
    }
    
    //
    // DELETE USER
    //
    
    /**
     * Delete the user if not linked to anything else.
     * @param userID A string with the user ID (a long).
     * @return True if succeed, false otherwise.
     */
    public static boolean deleteParticipantCommand(String participantID) {
            try {
                    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
                    datastore.delete(getKey(participantID));
            } catch (Exception e) {
                    return false;
            }
            return true;
    }
    
    //
    // QUERY USERS
    //
    
    /**
     * Return the requested number of users (e.g. 100).  
     * @param limit The number of users to be returned. 
     * @return A list of GAE {@link Entity entities}. 
     */
    public static List<Entity> getFirstParticipants(int limit) {
            DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
            Query query = new Query(ENTITY_KIND);
            List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(limit));
            return result;
    } 
   
}
